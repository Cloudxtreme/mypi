#!/usr/bin/env bash

set -e

DIR_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../../.."; pwd)"

touch "${DIR_ROOT}/etc/nginx.timestamp"

# shellcheck source=/dev/null
source "${DIR_ROOT}/scripts/lib/config.sh"

dyndns="$(Config::Get ".config.dyndns")"
if [[ -z "${dyndns}" ]]; then
    exit 1
fi

HOSTNAME="$(Config::Get ".config.hostname")"
LOCAL_IP="172.17.0.1"

DOMAIN="$(Config::Get ".config.domains[0].name")"
if [[ -z "${HOSTNAME}" ]]; then
  DOMAIN="${dyndns}"
fi

TLS_CONFIG() {
  echo "listen 10443 ssl;"
  echo "  ssl_certificate      /etc/letsencrypt/live/${1}/fullchain.pem;"
  echo "  ssl_certificate_key  /etc/letsencrypt/live/${1}/privkey.pem"
}

Config::WriteEtc "nginx/conf.d/default.conf" <<EOF
server_names_hash_bucket_size 64;

# redirect every http connect to https
server {
  listen 10080 default_server;
  server_name _;

  location /.well-known/acme-challenge {
    alias /etc/letsencrypt/acme-challenge/\$host;
  }

  location / {
    return 301 https://\$host\$request_uri;
  }
}

# just close the connection for https requests with an unused virtual-hostname
server {
  server_name _;
  $(TLS_CONFIG "${DOMAIN}");
  location / {
    # 444 is a magic response code which tells nginx, just to close the connection
    return 444;
  }
}
EOF

Config::WriteEtc "nginx/conf.d/${dyndns}.conf" <<EOF
server {
  server_name          ${dyndns};
  $(TLS_CONFIG "${DOMAIN}");
  location / {
    proxy_pass http://192.168.0.1;
  }
}
EOF

for ((i = 0 ;  ; i++)); do
  webcam="$(Config::Get ".config.webcams[${i}]")"
  if [[ -z "${webcam}" ]]; then break; fi
  name="$(Config::Get "${webcam}" ".name")"

  Config::WriteEtc "nginx/conf.d/webcam-${i}.${DOMAIN}.conf" <<EOF
server {
  server_name          ${name}.${DOMAIN};
  $(TLS_CONFIG "${DOMAIN}");
  location / {
    proxy_pass http://${LOCAL_IP}:20080/;
  }
}
EOF
done

mkdir -p "${DIR_ROOT}/etc/nginx/conf.d/pki"
cp "${DIR_ROOT}/config/pki/tls_priv.pem" "${DIR_ROOT}/etc/nginx/conf.d/pki/tls_priv.pem"
cat "${DIR_ROOT}/config/pki/tls_cert.pem" "${DIR_ROOT}/config/pki/root_ca_cert.pem" > "${DIR_ROOT}/etc/nginx/conf.d/pki/tls_cert.pem"

Config::WriteEtc "nginx/conf.d/${HOSTNAME}.conf" <<EOF
server {
  listen 443 ssl;
  server_name          ${HOSTNAME};
  ssl_certificate      /etc/nginx/conf.d/pki/tls_cert.pem;
  ssl_certificate_key  /etc/nginx/conf.d/pki/tls_priv.pem;
  location /ftp/ {
    autoindex on;
    root /opt;
  }
  location /nodered {
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_pass http://${LOCAL_IP}:1880;
  }
}
EOF

for ((i = 0 ;  ; i++)); do
  DOMAIN="$(Config::Get ".config.domains[${i}].name")"
  if [[ -z "${DOMAIN}" ]]; then break; fi
  for ((j = 0 ;  ; j++)); do
    HOST="$(Config::Get ".config.domains[${i}].hosts[${j}].name")"
    ADDRESS="$(Config::Get ".config.domains[${i}].hosts[${j}].address")"
    if [[ -z "${HOST}" || -z "${ADDRESS}" ]]; then break; fi
      Config::WriteEtc "nginx/conf.d/${HOST}.${DOMAIN}.conf" <<EOF
server {
  server_name          ${HOST}.${DOMAIN};
  $(TLS_CONFIG "${DOMAIN}");
  location / {
    proxy_pass ${ADDRESS};
    proxy_redirect ${ADDRESS}/ https://${HOST}.${DOMAIN}/;
  }
}
EOF
  done
done

# delete all config files which have not been created from this script
find "${DIR_ROOT}/etc/nginx/conf.d/"         \
  -type f                                    \
  ! -newer "${DIR_ROOT}/etc/nginx.timestamp" \
  -delete
rm -f "${DIR_ROOT}/etc/nginx.timestamp"
